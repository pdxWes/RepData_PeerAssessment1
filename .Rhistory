unlink("testdir", recursive = TRUE)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 <7
10 <= 10
5 != 7
NOT 5 == 7
5 NOT == 7
NOT (5 == 7)
not(5 == 7)
!(5 ==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
set.seed
set.seed(1)
x <- rnomr(100)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
plot(x,y)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() <- t1
Sys.time() < t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plote(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
str(mtcars)
summry(mtcars)
summary(mtcars)
?mtcars
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
?rep
rep(0:1, each = 5)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
hist(y)
library("xlsx", lib.loc="~/R/win-library/3.1")
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
remove.packages(C("xslx", "xlsxjars", "rJava"))
remove.packages("rJava")
remove.packages("xlsxjars")
removing.packages("xlsx")
remove.packages("xlsx")
install.package("xlsx")
install.packages("xlsx")
library("xlsx")
dat <- read.xlsx("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
dat <- read.xlsx2("./DataSci_coursera/Getting_Cleaning/Nat_gas.xlsx", 1)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
# This is based on a tutorial found here.
# https://github.com/hadley/httr/blob/master/demo/oauth2-github.r
# I just repleced all the arguments with my applicate credentials and the URL
# from the quiz
library(httr)
library(httpuv)
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", key = "96725ec965abfe0395ca",
secret = "dc014d725c99b7799080bfa78f72932e60984b83")
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
library(raster)
#This is the R library used to process raster files.
library(rgdal)
#You may need this library as well.
LANDIS_directory<-"C:/Users/Wes/Documents/Landis_book/Chapter_7_Outputs/Chapter_7/"
#file directory where inputs and outputs are found.  Edit this to represent your own file #location.
list.files(LANDIS_directory)
ecoregion_file<-paste(LANDIS_directory,"ecoregions.gis",sep="")
ecoregion_raster<-raster(ecoregion_file)
plot(ecoregion_raster)
freq(ecoregion_raster)
max_age_file<-paste(LANDIS_directory,"output/max-spp-age/AllSppMaxAge-20.img",sep="")
max_age_raster<-raster(max_age_file)
plot(max_age_raster)
ecoregion_DF<-as.data.frame(ecoregion_raster)
max_age_DF<-as.data.frame(max_age_raster)
head(ecoregion_Max_age_combine)
ecoregion_Max_age_combine<-cbind(ecoregion_DF,max_age_DF)
head(ecoregion_Max_age_combine)
unique_ecoregions<-unique(ecoregion_DF[,1])
for (unique_ecoregion in unique_ecoregions){
#for every unique ecoregion name (do some function)...
print (unique_ecoregion)
#print the ecoregion name
ecoregion_subset<- subset(ecoregion_Max_age_combine, ecoregion_Max_age_combine$ecoregions == unique_ecoregion)
#subset just the data from a single ecoregion.
ecoregion_mean_max_age<-mean(ecoregion_subset$AllSppMaxAge.20)
#Average max age for a unique ecoregion
print(ecoregion_mean_max_age)
#print the mean max age for a unique ecoregion
}
ecoregion_mean_max_age_summary<-tapply(max_age_DF[,1],list(ecoregion_DF[,1]), mean)
#summary of maxage by ecoregion.
print(ecoregion_mean_max_age_summary)
install.packages("lattice")
install.packages("nmle")
install.packages("nmle")
install.packages("nlme")
nlme
library(lattice)
library(nlme)
data(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
install.packages(ggplot2)
sntall.packages("ggplot2")
install.packages("ggplot2")
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
f <- rbinom(1, size = 10, prob = 0.5)
f
rbinom(1, size = 10, prob = 0.5)
rbinom(1, size = 10, prob = 0.5)
rbinom(1, size = 10, prob = 0.5)
rbinom(1, size = 10, prob = 0.5)
rbinom(1, size = 10, prob = 0.5)
rbinom(c(1,3,5), size = 10, prob = 0.5)
rbinom(c(1,3,5), size = 10, prob = 0.5)
rbinom(c(1,3,5), size = 10, prob = 0.5)
rbinom(c(1,3,5), size = 10, prob = 0.5)
unzip(paste0("C:/Users/Wes/Documents/DataSci_coursera/ExploratoryDA/",
"CourseProject02/exdata-data-NEI_data.zip"))
"CourseProject02/exdata-data-NEI_data.zip"))
unzip(paste0("C:/Users/Wes/Documents/DataSci_coursera/ExploratoryDA/",
"CourseProject02/exdata-data-NEI_data.zip"))
setwd("./DataSci_coursera/ExploratoryDA/CourseProject02)
unzip(paste0("C:/Users/Wes/Documents/DataSci_coursera/ExploratoryDA/",
"CourseProject02/exdata-data-NEI_data.zip"))
setwd("./DataSci_coursera/ExploratoryDA/CourseProject02)
setwd("./DataSci_coursera/ExploratoryDA/CourseProject02")
```{r Part1, echo = TRUE}
setwd(paste0("./DataSci_coursera/ReproducibleResearch/PeerAssessment1/",
"RepData_PeerAssessment1"))
dta <- read.csv("activity.csv")
```
library("lattice", lib.loc="~/R/win-library/3.1")
dta <- read.csv("activity.csv")
test2 <- tapply(dta$steps, dta$date, sum)
test3 <- tapply(dta$steps, dta$interval, mean, na.rm)
dta <- read.csv("activity.csv")
test3 <- tapply(dta$steps, dta$interval, mean, na.rm)
test3 <- tapply(dta$steps, dta$interval, mean, na.rm=TRUE)
interval_mean <- tapply(dta$steps, dta$interval, mean, na.rm=TRUE)
intervals <- unique(dta$interval) # create vector of intervals
xyplot(intervals, interval_mean, type = "l")
newdta<- dta
newdta[is.na(newdta)] <- 0
interval <- as.vector(subset(newdta, date == "2012-10-01",
select = interval)$interval) # use unique
interval <- unique(newdta$interval)
test3 <- tapply(dta$steps, dta$interval, mean, na.rm=TRUE)
test4 <- tapply(part1$steps, part1$interval, mean)
xyplot(interval, test3, type = "l")
xyplot(intervals~interval_mean, type = "l")
835/60
2355/60
288*5
View(dta)
imputed_data <- my_impute(dta
)
my_impute <- function(my_data) {
impute_data <- my_data[!is.na(my_data$steps),]
interval <- unique(impute_data$interval)
int_means <- tapply(impute_data$steps, impute_data$interval, mean)
lkup_table <- cbind(interval, int_means)
for(i in 1:length(my_data$steps)){
if(is.na(my_data$steps[i])) {
my_data$steps[i] <- lkup_table[lkup_table[,1] == my_data$interval[i]][2]
}
}
return(my_data)
}
imputed_data <- my_impute(dta)
View(imputed_data)
View(dta)
histogram(daily_sum_impute, type = "percent", breaks = 9)
seq(0, 2400, by = 100)
seq(0, 2355, by = 100)
seq(0, 2355, by = 300)
daily_sum <- with(dta, tapply(steps, date, sum))
histogram(daily_sum, type = "percent", breaks = seq(0, 2355, by = 300))
histogram(daily_sum, type = "percent", breaks = seq(5, 2355, by = 300))
max(daily_sum)
max(daily_sum, na.rm = TRUE)
max(daily_sum_impute)
daily_sum_impute <- with(imputed_data, tapply(steps, date, sum))
max(daily_sum_impute)
library("dplyr", lib.loc="~/R/win-library/3.1")
get_weekpart <- function(imputed_data){
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
wk_int_mean <- with(imputed_data, tapply(steps, list(interval, weekpart),
mean)
wk_int_mean <- cbind(unique(imputed_data$interval), wk_int_mean)
wk_int_mean <- as.data.frame(wk_int_mean)
names(wk_int_mean)[1] <- "Interval"
wk_int_mean_rearranged <- gather(wk_int_mean, PartOfWeek, Int_mean,
-Interval)
return(wk_int_mean_rearranged)
}
library(tidyr)
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
View(imputed_data)
aves <- tapply(imputed_data$steps, list(imputed_data$interval, imputed_data$weekpart), mean)
aves <- cbind(unique(imputed_data$interval), aves)
get_weekpart <- function(imputed_data){
library(tidyr)
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
wk_int_mean <- with(imputed_data, tapply(steps, list(interval, weekpart),
mean)
wk_int_mean <- cbind(unique(imputed_data$interval), wk_int_mean)
wk_int_mean <- as.data.frame(wk_int_mean)
names(wk_int_mean)[1] <- "Interval"
wk_int_mean_rearranged <- gather(wk_int_mean, PartOfWeek, Int_mean,
-Interval)
return(wk_int_mean_rearranged)
}
dta <- read.csv("activity.csv")
```
my_impute <- function(my_data) {
impute_data <- my_data[!is.na(my_data$steps),]
interval <- unique(impute_data$interval)
int_means <- tapply(impute_data$steps, impute_data$interval, mean)
lkup_table <- cbind(interval, int_means)
for(i in 1:length(my_data$steps)){
if(is.na(my_data$steps[i])) {
my_data$steps[i] <- lkup_table[lkup_table[,1] == my_data$interval[i]][2]
}
}
return(my_data)
}
imputed_data <- my_impute(dta)
View(dta)
View(imputed_data)
library(tidyr)
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
View(imputed_data)
wk_int_mean <- with(imputed_data, tapply(steps, list(interval, weekpart),
mean)
)
wk_int_mean <- cbind(unique(imputed_data$interval), wk_int_mean)
wk_int_mean <- as.data.frame(wk_int_mean)
names(wk_int_mean)[1] <- "Interval"
wk_int_mean_rearranged <- gather(wk_int_mean, PartOfWeek, Int_mean,
-Interval)
dta <- read.csv("activity.csv")
my_impute <- function(my_data) {
impute_data <- my_data[!is.na(my_data$steps),]
interval <- unique(impute_data$interval)
int_means <- tapply(impute_data$steps, impute_data$interval, mean)
lkup_table <- cbind(interval, int_means)
for(i in 1:length(my_data$steps)){
if(is.na(my_data$steps[i])) {
my_data$steps[i] <- lkup_table[lkup_table[,1] == my_data$interval[i]][2]
}
}
return(my_data)
}
imputed_data <- my_impute(dta)
get_weekpart <- function(imputed_data){
library(tidyr)
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
wk_int_mean <- with(imputed_data, tapply(steps, list(interval, weekpart),
mean))
wk_int_mean <- cbind(unique(imputed_data$interval), wk_int_mean)
wk_int_mean <- as.data.frame(wk_int_mean)
names(wk_int_mean)[1] <- "Interval"
wk_int_mean_rearranged <- gather(wk_int_mean, PartOfWeek, Int_mean,
-Interval)
return(wk_int_mean_rearranged)
}
get_weekpart <- function(imputed_data){
library(tidyr)
dayofweek <- weekdays(as.Date(imputed_data$date, "%Y-%m-%d"))
weekpart <- NULL
for(i in 1:length(dayofweek)){
if(dayofweek[i] == "Monday" || dayofweek[i] == "Tuesday" ||
dayofweek[i] == "Wednesday" || dayofweek[i] == "Thursday" ||
dayofweek[i] == "Friday"){
weekpart[i] <- "Weekday"
} else {
weekpart[i] <- "Weekend"
}
}
imputed_data <- cbind(imputed_data, weekpart)
wk_int_mean <- with(imputed_data, tapply(steps, list(interval, weekpart),
mean))
wk_int_mean <- cbind(unique(imputed_data$interval), wk_int_mean)
wk_int_mean <- as.data.frame(wk_int_mean)
names(wk_int_mean)[1] <- "Interval"
wk_int_mean_rearranged <- gather(wk_int_mean, PartOfWeek, Int_mean,
-Interval)
return(wk_int_mean_rearranged)
}
weekpart_data <- get_weekpart(imputed_data)
View(weekpart_data)
with(weekpart_data, xyplot(int_mean~Interval|PartOfWeek), type = "l",
layout=c(1,2))
with(weekpart_data, xyplot(Int_mean~Interval|PartOfWeek), type = "l",
layout=c(1,2))
with(weekpart_data, xyplot(Int_mean~Interval|PartOfWeek, type = "l",
layout=c(1,2)))
